## server with MASS REST API to generate traces
MASS_HOST=${MASS_HOST:-localhost}
## host where perf servers are running
PERF_HOST=${PERF_HOST:-localhost}
# the length of generated sequences. If continuous replay
# is not enabled this is also the length of the replay.
SEQ_LEN=${SEQ_LEN:-10}
# Max download rate in Mbps
MAX_DOWN=${MAX_DOWN:-1}
# Max upload rate in Mbps
MAX_UP=${MAX_UP:-1}
# Message buffer size in replay
BUFFER=${BUFFER:-1024}
# Port where download perf server runs
DOWN_PORT=${DOWN_PORT:-5201}
# Port where upload perf server runs
UP_PORT=${UP_PORT:-6666}
# Time to replay each entry in the trace in seconds.
EPOCH_TIME=${EPOCH_TIME:-5}
# Type of app to simulate at the beginning
INITIAL_CONTEXT=${INITIAL_CONTEXT:-"INTERACT"}
# Probability to stay with an interact type app in the next 
# time step if the current time step simulates an interact app
INTERACT_STAY_PROB=${INTERACT_STAY_PROBABILITY:-0.5}
# Probability to stay with a stream type app in the next 
# time step if the current time step simulates a stream app
STREAM_STAY_PROB=${STREAM_STAY_PROBABILITY:-0.5}
# If enabled (1) use wifi signal streanght as context for trace generation.
# Disable with 0
USE_SIGNAL=${USE_SIGNAL:-0}
# probability of generating a trace entry with UDP. If not then use TCP.
UDP_PROB=${UDP_PROB:-0}
# After replaying a full sequnce regenerate a new sequence
CONTINUOUS=${CONTINUOUS:-0}
# Client to use: ${PERF_CLIENT}client.sh will be used for replay
PERF_CLIENT=${PERF_CLIENT:-iperf}
# Trace cache dir
CACHE_DIR=${CACHE_DIR:-traces}
# Use cached traces
USE_CACHED_TRACES=${USE_CACHED_TRACES:-1}
# Disable downloads
DISABLE_DOWNLOADS=${DISABLE_DOWNLOADS:-0}
# Disable uploads
DISABLE_UPLOADS=${DISABLE_UPLOADS:-1}
# Enable logging
LOG_ENABLED=${LOG_ENABLED:-1}
# Log directory
LOG_DIR=${LOG_DIR:-logs}
